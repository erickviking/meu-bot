// bot.js
require('dotenv').config(); 

const express = require('express');
const bodyParser = require('body-parser');
const OpenAI = require('openai');
const { MessagingResponse } = require('twilio').twiml;
const twilio = require('twilio');

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));

// ---- Configure APIs --------------------------------------------------------

// Twilio (credentials stored em variáveis de ambiente)
const client = twilio(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);
const twilioWhatsAppNumber = process.env.TWILIO_WHATSAPP_NUMBER;

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ---- Exemplo de base de conhecimento --------------------------------------
// Essa estrutura pode ser expandida ou lida de um banco de dados.
const quelsaKB = {
  profile: {
    agentName: 'Quelsa',
    doctorName: 'Dr. Quelson',
    doctorSpecialty: 'Gastroenterologista',
    clinicName: 'Consultório Dr. Quelson',
  },
  conversationalFlows: {
    opening: {
      default:
        'Olá! Aqui é a Quelsa, do consultório do Dr. Quelson. Como posso ajudar?',
    },
    transitionToBooking: {
      question:
        'Se você tiver interesse, posso lhe passar valores e verificar horários disponíveis. Deseja prosseguir?',
    },
    priceAndPlanReveal: {
      script:
        'O Dr. Quelson realiza consultas particulares (valor: R$500). Caso deseje, posso verificar nossos próximos horários disponíveis.',
    },
  },
  serviceDetails: {
    consultationType: 'Particular',
    price: 500,
    currency: 'BRL',
  },
  auxiliaryData: {
    schedulingLogic:
      'Tenho horário nesta quinta-feira às 15h ou terça-feira às 10h. Qual prefere?',
  },
};

// ---- Funções auxiliares ---------------------------------------------------

// Detecta a intenção usando a OpenAI
async function detectIntent(message) {
  const prompt = `Classifique a intenção principal da mensagem do usuário em uma das seguintes categorias: agendar, valores, sintomas, saudacao, outra.

Exemplos:
Mensagem: "Olá, boa tarde" -> saudacao
Mensagem: "Gostaria de marcar uma consulta" -> agendar
Mensagem: "Quanto custa?" -> valores
Mensagem: "Estou com dor de estômago forte" -> sintomas
Mensagem: "Qual o endereço?" -> outra

Mensagem a ser classificada: "${message}"
Responda APENAS com a palavra da intenção.`;

  const resp = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [{ role: 'user', content: prompt }],
  });

  return resp.choices[0].message.content.trim();
}

// Gera a resposta principal
async function generateReply(intent, message) {
  if (intent === 'agendar') {
    return quelsaKB.conversationalFlows.transitionToBooking.question;
  }

  if (intent === 'valores') {
    return quelsaKB.conversationalFlows.priceAndPlanReveal.script;
  }

  if (intent === 'sintomas') {
    return (
      'Entendo, isso merece atenção. ' +
      quelsaKB.conversationalFlows.transitionToBooking.question
    );
  }

  // Respostas rápidas da base de conhecimento
  const lower = message.toLowerCase();
  if (lower.includes('horário') || lower.includes('agenda')) {
    return quelsaKB.auxiliaryData.schedulingLogic;
  }
  if (lower.includes('endereço')) {
    return 'Estamos na Rua Exemplo, 123, Centro.';
  }

  // Fallback para uma resposta geral da OpenAI
  const resp = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [
      { 
        role: 'system', 
        content: `Você é Quelsa, uma assistente virtual altamente profissional do ${quelsaKB.profile.clinicName}, cujo especialista é o ${quelsaKB.profile.doctorName}, um ${quelsaKB.profile.doctorSpecialty}. 
        Sua principal função é responder perguntas sobre a clínica e auxiliar no agendamento de consultas.
        REGRAS IMPORTANTES:
        1. Seja sempre extremamente cordial, profissional e empática.
        2. NUNCA forneça diagnósticos ou conselhos médicos. Se um usuário descrever sintomas, reconheça o problema com empatia e imediatamente o convide a agendar uma consulta para uma avaliação adequada com o Dr. Quelson.
        3. Suas respostas devem ser curtas e diretas, em português do Brasil.
        4. Use a base de conhecimento para responder sobre horários e valores sempre que possível.`
      },
      { role: 'user', content: message },
    ],
  });

  return resp.choices[0].message.content.trim();
}

// ---- Rota de Webhook do Twilio --------------------------------------------

app.post('/webhook', async (req, res) => {
  console.log("--- INÍCIO DA REQUISIÇÃO /webhook ---"); // Log #1
  const twiml = new MessagingResponse();

  try {
    const incomingMsg = req.body.Body || '';
    console.log(`Log #2: Mensagem recebida: "${incomingMsg}"`);

    console.log("Log #3: Tentando detectar a intenção...");
    const intent = await detectIntent(incomingMsg);
    console.log(`Log #4: Intenção detectada: "${intent}"`);

    console.log("Log #5: Tentando gerar a resposta...");
    const reply = await generateReply(intent, incomingMsg);
    console.log(`Log #6: Resposta gerada com sucesso.`);

    twiml.message(reply);
    console.log("Log #7: Resposta TwiML criada.");

  } catch (error) {
    console.error("ERRO GRAVE CAPTURADO:", error); // Se algo falhar, veremos aqui
    twiml.message('Desculpe, ocorreu um problema técnico no momento.');
  }

  res.set('Content-Type', 'text/xml');
  res.send(twiml.toString());
  console.log("--- FIM DA REQUISIÇÃO ---"); // Log #8
});;

// ---- Exemplo de envio ativo de mensagem (opcional) ------------------------
// Para disparar uma mensagem programada, chame esta função.
async function sendActiveMessage(toNumber, body) {
  await client.messages.create({
    from: `whatsapp:${twilioWhatsAppNumber}`,
    to: `whatsapp:${toNumber}`,
    body: body,
  });
}

// ---- Inicialização do servidor -------------------------------------------

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Bot rodando na porta ${PORT}`);
});
