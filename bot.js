// bot.js - Secret√°ria NEPQ Blindada CORRIGIDA
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const OpenAI = require('openai');

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const fs = require('fs');

const app = express();
app.use(bodyParser.json());

// ---- CONTROLE DE CUSTOS MAIS RIGOROSO ---------------------------------------
let dailyTokenCount = 0;
let dailyRequestCount = 0;
let hourlyTokenCount = 0;
let hourlyRequestCount = 0;

// Limites mais conservadores
const MAX_DAILY_TOKENS = 50000; // Reduzido de 100k para 50k ($50/dia max)
const MAX_DAILY_REQUESTS = 2000; // Reduzido de 5k para 2k
const MAX_HOURLY_TOKENS = 5000; // Novo: limite por hora
const MAX_HOURLY_REQUESTS = 200; // Novo: limite por hora

const rateLimiter = new Map();
const emergencyPhones = new Set();

// Reset di√°rio dos contadores
setInterval(() => {
  dailyTokenCount = 0;
  dailyRequestCount = 0;
  console.log('üîÑ Contadores di√°rios resetados');
}, 24 * 60 * 60 * 1000);

// Reset hor√°rio dos contadores
setInterval(() => {
  hourlyTokenCount = 0;
  hourlyRequestCount = 0;
  console.log('üîÑ Contadores hor√°rios resetados');
}, 60 * 60 * 1000);

// ---- SESS√ïES COM GEST√ÉO DE MEM√ìRIA ------------------------------------------
const sessions = new Map();

function getSession(phone) {
  if (!sessions.has(phone)) {
    sessions.set(phone, {
      stage: 'start',
      firstName: null,
      askedName: false,
      lastIntent: '',
      problemContext: null,
      duration: null,
      worsening: null,
      triedSolutions: null,
      impact: null,
      desiredOutcome: null,
      repeatCount: 0,
      conversationHistory: [],
      lastActivity: Date.now(),
      requestCount: 0,
      timezone: 'America/Sao_Paulo' // Padr√£o Brasil
    });
  }
  
  // Atualiza √∫ltima atividade
  const session = sessions.get(phone);
  session.lastActivity = Date.now();
  return session;
}

// Cleanup de sess√µes antigas (previne memory leak)
function cleanupOldSessions() {
  const TWO_HOURS = 2 * 60 * 60 * 1000;
  const now = Date.now();
  let cleaned = 0;
  
  for (const [phone, session] of sessions.entries()) {
    if (!session.lastActivity || (now - session.lastActivity) > TWO_HOURS) {
      sessions.delete(phone);
      cleaned++;
    }
  }
  
  if (cleaned > 0) {
    console.log(`üßπ Limpeza: ${cleaned} sess√µes antigas removidas`);
  }
}

// Executa limpeza a cada 30 minutos
setInterval(cleanupOldSessions, 30 * 60 * 1000);

// ---- CONFIGURA√á√ÉO DA OPENAI -------------------------------------------------
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// ---- DETEC√á√ÉO DE EMERG√äNCIAS M√âDICAS MELHORADA -----------------------------
function isEmergency(message) {
  const emergencyKeywords = [
    // Card√≠acas
    'infarto', 'infarte', 'ataque cardiaco', 'ataque card√≠aco', 'peito d√≥i muito', 'dor no peito forte',
    'parada card√≠aca', 'parada cardiaca', 'cora√ß√£o parou',
    
    // Respirat√≥rias
    'n√£o consigo respirar', 'nao consigo respirar', 'falta de ar grave', 'sufocando',
    'engasgado', 'engasgada', 'asfixia',
    
    // Neurol√≥gicas
    'avc', 'derrame', 'convuls√£o', 'convulsao', 'ataque epil√©tico', 'epileptico',
    'desmaiei', 'desmaiou', 'inconsciente', 'perdeu consciencia',
    
    // Traumas
    'acidente', 'atropelado', 'fratura exposta', 'sangramento grave', 'muito sangue',
    'osso quebrado', 'quebrei o osso', 'sangramento',
    
    // Intoxica√ß√µes
    'overdose', 'envenenamento', 'intoxica√ß√£o', 'intoxicacao', 'veneno',
    
    // Emerg√™ncia geral
    'emergencia', 'emerg√™ncia', 'urgencia grave', 'urg√™ncia grave', 'socorro',
    'samu', '192', '193', '190', 'ambulancia', 'ambul√¢ncia',
    
    // Suic√≠dio
    'vou me matar', 'quero morrer', 'suicidio', 'suic√≠dio', 'me matar', 'vou morrer', 'morrer',
    
    // Dor extrema
    'dor insuport√°vel', 'dor insuportavel', 'n√£o aguento mais', 'nao aguento mais'
  ];
  
  const msg = message.toLowerCase().trim();
  return emergencyKeywords.some(keyword => msg.includes(keyword));
}

function getEmergencyResponse(firstName) {
  const name = firstName || 'amigo(a)';
  return `üö® ${name}, se voc√™ est√° tendo uma emerg√™ncia m√©dica, por favor:

LIGUE IMEDIATAMENTE:
üöë SAMU: 192
üöí Bombeiros: 193  
üöì Emerg√™ncia: 190

V√° ao pronto-socorro mais pr√≥ximo. N√ÉO ESPERE!

Para consultas n√£o urgentes, retome contato quando estiver seguro.

O Dr. Quelson n√£o atende emerg√™ncias pelo WhatsApp.`;
}

// ---- RATE LIMITING MELHORADO ------------------------------------------------
function isRateLimited(phone) {
  const now = Date.now();
  const userRequests = rateLimiter.get(phone) || [];
  
  // Remove requests older than 1 minute
  const recentRequests = userRequests.filter(time => now - time < 60000);
  
  // Diferentes limites baseado no hist√≥rico do usu√°rio
  let maxRequests = 10; // Padr√£o: 10 por minuto
  
  // Usu√°rios novos: limite menor
  if (recentRequests.length === 0) {
    maxRequests = 5;
  }
  
  // Usu√°rios com muitas mensagens: limite maior
  const session = sessions.get(phone);
  if (session && session.conversationHistory && session.conversationHistory.length > 20) {
    maxRequests = 15;
  }
  
  if (recentRequests.length >= maxRequests) {
    return true;
  }
  
  recentRequests.push(now);
  rateLimiter.set(phone, recentRequests);
  return false;
}

// ---- CONTROLE DE CUSTOS MAIS RIGOROSO ---------------------------------------
function checkCostLimits() {
  // Verifica limites hor√°rios primeiro
  if (hourlyTokenCount > MAX_HOURLY_TOKENS) {
    throw new Error(`Limite HOR√ÅRIO de tokens excedido: ${hourlyTokenCount}/${MAX_HOURLY_TOKENS}`);
  }
  
  if (hourlyRequestCount > MAX_HOURLY_REQUESTS) {
    throw new Error(`Limite HOR√ÅRIO de requests excedido: ${hourlyRequestCount}/${MAX_HOURLY_REQUESTS}`);
  }
  
  // Depois verifica limites di√°rios
  if (dailyTokenCount > MAX_DAILY_TOKENS) {
    throw new Error(`Limite DI√ÅRIO de tokens excedido: ${dailyTokenCount}/${MAX_DAILY_TOKENS}`);
  }
  
  if (dailyRequestCount > MAX_DAILY_REQUESTS) {
    throw new Error(`Limite DI√ÅRIO de requests excedido: ${dailyRequestCount}/${MAX_DAILY_REQUESTS}`);
  }
}

// ---- COMPRESS√ÉO DE CONTEXTO --------------------------------------------------
function compressContext(history) {
  if (!history || history.length <= 30) return history;
  
  // Mant√©m primeiras 10 e √∫ltimas 20 mensagens para economizar tokens
  const compressed = [
    ...history.slice(0, 10),
    `... [${history.length - 30} mensagens resumidas] ...`,
    ...history.slice(-20)
  ];
  
  return compressed;
}

// ---- FUN√á√ïES AUXILIARES BLINDADAS -------------------------------------------
function extractFirstName(text) {
  if (!text || typeof text !== 'string') return 'Paciente';
  
  const cleaned = text.trim().toLowerCase();
  
  const patterns = [
    /(?:aqui (?:√©|eh) |sou (?:a |o )?|me chamo |meu nome (?:√©|eh) )(.+)/,
    /(?:√©|eh) (?:a |o )?(.+)/,
    /^(.+)$/
  ];
  
  for (const pattern of patterns) {
    const match = cleaned.match(pattern);
    if (match) {
      const name = match[1].trim().split(' ')[0];
      // Sanitiza e capitaliza
      const safeName = name.replace(/[^a-z√°√†√£√¢√©√™√≠√≥√¥√µ√∫√ß]/gi, '');
      return safeName.charAt(0).toUpperCase() + safeName.slice(1);
    }
  }
  
  return text.trim().split(' ')[0].replace(/[^a-z√°√†√£√¢√©√™√≠√≥√¥√µ√∫√ß]/gi, '') || 'Paciente';
}

function containsFirstNameOnly(text) {
  if (!text || typeof text !== 'string') return false;
  
  const cleaned = text.trim().toLowerCase();
  
  const namePatterns = [
    /(?:aqui (?:√©|eh) |sou (?:a |o )?|me chamo |meu nome (?:√©|eh) )/,
    /^[a-z√°√†√£√¢√©√™√≠√≥√¥√µ√∫√ß\s]+$/i
  ];
  
  if (namePatterns.some(pattern => pattern.test(cleaned))) {
    return true;
  }
  
  if (cleaned.length < 2 || cleaned.length > 50 || /\d|[!@#$%^&*()_+=\[\]{}|;':",./<>?]/.test(cleaned)) {
    return false;
  }
  
  return true;
}

// ---- HOR√ÅRIO INTELIGENTE (TIMEZONE AWARE) -----------------------------------
function getCurrentGreeting() {
  const now = new Date();
  // For√ßa timezone do Brasil
  const brasilTime = new Date(now.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
  const hour = brasilTime.getHours();
  
  if (hour >= 5 && hour < 12) {
    return 'Bom dia!';
  } else if (hour >= 12 && hour < 18) {
    return 'Boa tarde!';
  } else {
    return 'Boa noite!';
  }
}

// ---- FALLBACK SEM IA (QUANDO OPENAI FALHA) ----------------------------------
function detectIntentFallback(message, stage, session) {
  const msg = message.toLowerCase().trim();
  
  // Emerg√™ncia sempre tem prioridade
  if (isEmergency(msg)) return 'emergencia';
  
  // Baseado em palavras-chave simples
  if (msg.includes('agendar') || msg.includes('marcar') || msg.includes('consulta')) return 'agendar';
  if (msg.includes('valor') || msg.includes('pre√ßo') || msg.includes('custa') || msg.includes('quanto')) return 'valores';
  if (msg.includes('conv√™nio') || msg.includes('convenio') || msg.includes('plano') || msg.includes('unimed')) return 'convenio';
  if (msg.includes('hor√°rio') || msg.includes('horario') || msg.includes('funciona') || msg.includes('atende')) return 'horarios';
  if (msg.includes('dor') || msg.includes('sintoma') || msg.includes('problema') || msg.includes('sinto')) return 'sintomas';
  if (msg.includes('sim') || msg.includes('ok') || msg.includes('tudo bem') || msg.includes('pode')) return 'positiva';
  if (msg.includes('n√£o') || msg.includes('nao') || msg.includes('nunca') || msg.includes('jamais')) return 'negativa';
  if (msg.includes('depende') || msg.includes('preciso saber') || msg.includes('antes')) return 'condicional';
  if (msg.includes('oi') || msg.includes('ol√°') || msg.includes('ola') || msg.includes('tchau')) return 'saudacao';
  
  return 'outra';
}

// ---- CLASSIFICADOR COM IA + FALLBACK MELHORADO ------------------------------
async function detectIntent(message, stage, session, retries = 2) {
  try {
    checkCostLimits();
    
    // Comprime hist√≥rico para economizar tokens
    const compressedHistory = compressContext(session.conversationHistory || []);
    
    const conversationContext = `
CONTEXTO:
- Nome: ${session.firstName || 'N/A'}
- Est√°gio: ${stage}
- Problema: ${session.problemContext || 'N/A'}
- √öltima inten√ß√£o: ${session.lastIntent || 'N/A'}

HIST√ìRICO:
${compressedHistory.slice(-5).join('\n')}
`.trim();

    const prompt = `Analise a inten√ß√£o da mensagem:

${conversationContext}

CATEGORIAS: emergencia, agendar, valores, sintomas, convenio, horarios, positiva, negativa, condicional, saudacao, outra

MENSAGEM: "${message}"

Responda S√ì a categoria:`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 10, // Reduzido para economia
      temperature: 0,
    });

    const tokens = response.usage?.total_tokens || 10;
    dailyTokenCount += tokens;
    hourlyTokenCount += tokens;
    dailyRequestCount++;
    hourlyRequestCount++;
    
    const result = response.choices[0].message.content.trim().toLowerCase();
    
    // Valida resultado
    const validCategories = ['emergencia', 'agendar', 'valores', 'sintomas', 'convenio', 'horarios', 'positiva', 'negativa', 'condicional', 'saudacao', 'outra'];
    if (!validCategories.includes(result)) {
      console.warn(`‚ö†Ô∏è IA retornou categoria inv√°lida: ${result}, usando fallback`);
      return detectIntentFallback(message, stage, session);
    }
    
    return result;
    
  } catch (error) {
    console.error(`‚ö†Ô∏è OpenAI falhou (tentativa ${3-retries}):`, error.message);
    
    if (retries > 0) {
      // Wait and retry
      await new Promise(resolve => setTimeout(resolve, 1000));
      return detectIntent(message, stage, session, retries - 1);
    }
    
    // Final fallback
    return detectIntentFallback(message, stage, session);
  }
}

// ---- RESPOSTAS VARIADAS PARA NATURALIDADE -----------------------------------
function getRandomResponse(responses) {
  if (!responses || !Array.isArray(responses) || responses.length === 0) {
    return 'Desculpe, estou com dificuldades t√©cnicas. Como posso te ajudar?';
  }
  return responses[Math.floor(Math.random() * responses.length)];
}

// ---- GERA√á√ÉO DE RESPOSTA BLINDADA -------------------------------------------
async function generateReply(session, from, message) {
  try {
    // Previne loops infinitos
    if (session.repeatCount > 5) {
      return `${session.firstName || 'Paciente'}, percebo que estamos tendo dificuldades na comunica√ß√£o. Que tal ligar diretamente para (11) 99999-9999? Assim posso te ajudar melhor! üòä`;
    }
    
    // Previne mensagens muito longas
    if (message.length > 500) {
      return `${session.firstName || 'Paciente'}, sua mensagem √© um pouco longa. Pode resumir em poucas palavras o que precisa? Assim consigo te atender melhor! üòä`;
    }
    
    // Adiciona mensagem ao hist√≥rico
    if (!session.conversationHistory) {
      session.conversationHistory = [];
    }
    session.conversationHistory.push(`Paciente: ${message}`);
    
    // Mant√©m √∫ltimas 100 mensagens (com compress√£o inteligente)
    if (session.conversationHistory.length > 100) {
      session.conversationHistory = session.conversationHistory.slice(-100);
    }

    const intent = await detectIntent(message, session.stage, session);

    // Detecta loops de repeti√ß√£o
    if (intent === session.lastIntent) {
      session.repeatCount += 1;
    } else {
      session.repeatCount = 0;
    }
    session.lastIntent = intent;

    // EMERG√äNCIA tem prioridade m√°xima
    if (intent === 'emergencia') {
      const emergencyReply = getEmergencyResponse(session.firstName);
      emergencyPhones.add(from); // Marca para n√£o repetir
      session.conversationHistory.push(`Bot: ${emergencyReply}`);
      return emergencyReply;
    }

    // Captura de nome com sauda√ß√£o calorosa
    if (!session.firstName) {
      if (!session.askedName) {
        session.askedName = true;
        const saudacao = getCurrentGreeting();
        
        const saudacoes = [
          `${saudacao} Voc√™ entrou em contato com o Consult√≥rio do Dr. Quelson, especialista em Gastroenterologia. Com quem eu tenho o prazer de falar? üòä`,
          `${saudacao} Aqui √© do consult√≥rio do Dr. Quelson. √â um prazer falar com voc√™! Qual seu nome?`,
          `${saudacao} Voc√™ est√° falando com a secret√°ria do Dr. Quelson. Como posso te chamar?`
        ];
        const reply = getRandomResponse(saudacoes);
        session.conversationHistory.push(`Bot: ${reply}`);
        return reply;
      }
      
      if (containsFirstNameOnly(message)) {
        session.firstName = extractFirstName(message);
        session.stage = 'situacao';
        
        const situacaoResponses = [
          `Oi, ${session.firstName}! Tudo bem? Como posso te ajudar hoje? O que te motivou a procurar o Dr. Quelson? üß°`,
          `√â um prazer falar com voc√™, ${session.firstName}! üòä Pode me contar um pouquinho o que est√° te incomodando? Assim consigo te orientar melhor üôè`,
          `Seja bem-vindo(a), ${session.firstName}! Queria te escutar um pouquinho... Pode me contar o que tem te preocupado? √Äs vezes s√≥ isso j√° alivia üí¨`
        ];
        const reply = getRandomResponse(situacaoResponses);
        session.conversationHistory.push(`Bot: ${reply}`);
        return reply;
      } else {
        const reply = 'Desculpe, n√£o consegui entender seu nome. Pode me dizer apenas seu primeiro nome, por favor?';
        session.conversationHistory.push(`Bot: ${reply}`);
        return reply;
      }
    }

    let reply = '';

    // Fluxo NEPQ humanizado baseado no est√°gio
    switch (session.stage) {
      case 'situacao':
        // üü¢ SITUA√á√ÉO - Entendendo o contexto com empatia
        if (intent === 'agendar') {
          session.stage = 'problema';
          session.problemContext = 'agendamento_direto';
          reply = `Entendo, ${session.firstName}. Para eu conseguir o melhor hor√°rio e preparar o Dr. Quelson para te atender bem, pode me contar o que est√° te incomodando? üôè`;
        } else if (intent === 'convenio') {
          reply = `${session.firstName}, aqui o Dr. Quelson atende particular, mas posso te dizer uma coisa? Muita gente que vem aqui j√° passou por v√°rios m√©dicos do conv√™nio... e depois fala que valeu cada centavo investir numa consulta onde realmente se sentiram ouvidas. 

A consulta √© R$ 400,00. Pode me contar qual o motivo que te trouxe aqui? Assim posso te explicar se √© o tipo de caso que o Dr. Quelson pode te ajudar üòä`;
        } else if (intent === 'condicional') {
          reply = `${session.firstName}, entendo que voc√™ precisa se planejar! Aqui √© atendimento particular (R$ 400,00). Mas me conta: o que est√° te preocupando? Assim posso te orientar se vale a pena investir numa consulta especializada üòä`;
        } else if (intent === 'valores') {
          reply = `${session.firstName}, a consulta √© R$ 400,00. Mas antes de te explicar como funciona, me ajuda com uma coisa? O que exatamente est√° te preocupando? Assim posso te explicar direitinho como o Dr. Quelson pode te ajudar üòä`;
        } else if (intent === 'sintomas') {
          session.stage = 'problema';
          session.problemContext = message;
          const problemResponses = [
            `Nossa, ${session.firstName}... deve ser bem dif√≠cil mesmo üòî E isso tem te incomodado mais em qual parte do dia? De manh√£, √† noite...?`,
            `Poxa, ${session.firstName}, entendo... H√° quanto tempo est√° assim?`,
            `Nossa, ${session.firstName}... Deve ser bem preocupante. Me conta, h√° quanto tempo voc√™ sente isso?`
          ];
          reply = getRandomResponse(problemResponses);
        } else if (intent === 'urgencia') {
          session.stage = 'problema';
          reply = `${session.firstName}, entendo sua urg√™ncia. Para eu conseguir o melhor hor√°rio para voc√™, pode me contar rapidinho o que est√° acontecendo?`;
        } else {
          reply = `${session.firstName}, pode me contar um pouquinho do que est√° te incomodando? Como posso te ajudar melhor com isso que voc√™ est√° sentindo? üí¨`;
        }
        break;

      case 'problema':
        // üî¥ PROBLEMA - Criando consci√™ncia da dor
        if (intent === 'duracao' || intent === 'sintomas') {
          if (!session.duration) {
            session.duration = message;
            const worseningQuestions = [
              `E isso tem piorado com o tempo ou mant√©m do mesmo jeito, ${session.firstName}?`,
              `J√° aconteceu de isso atrapalhar algum momento importante seu? Algum evento, trabalho, sono...?`,
              `Voc√™ sente que tem ficado mais intenso ultimamente?`
            ];
            reply = getRandomResponse(worseningQuestions);
          } else if (!session.worsening) {
            session.worsening = message;
            const solutionQuestions = [
              `Voc√™ j√° passou com algum m√©dico por isso antes? Sentiu que te ajudaram de verdade?`,
              `J√° tentou algum tratamento ou medica√ß√£o para isso?`,
              `E voc√™ j√° tentou resolver de alguma forma? Algum tratamento, medica√ß√£o ou mudan√ßa na alimenta√ß√£o?`
            ];
            reply = getRandomResponse(solutionQuestions);
          } else if (!session.triedSolutions) {
            session.triedSolutions = message;
            session.stage = 'implicacao';
            const implicationStarters = [
              `Entendo, ${session.firstName}... Voc√™ sente que isso tem afetado sua rotina?`,
              `Puxa, ${session.firstName}... E isso j√° atrapalhou seu sono ou alimenta√ß√£o?`,
              `Nossa... J√° parou pra pensar no quanto isso te desgasta emocionalmente? üòû`
            ];
            reply = getRandomResponse(implicationStarters);
          }
        } else {
          const problemQuestions = [
            `${session.firstName}, me conta: h√° quanto tempo voc√™ sente isso?`,
            `E isso tem te incomodado mais em qual parte do dia, ${session.firstName}?`,
            `Nossa, ${session.firstName}... deve ser bem dif√≠cil mesmo üòî H√° quanto tempo est√° assim?`
          ];
          reply = getRandomResponse(problemQuestions);
        }
        break;

      case 'implicacao':
        // üü† IMPLICA√á√ÉO - Aumentando a urg√™ncia com cuidado
        if (intent === 'impacto' || intent === 'positiva') {
          if (!session.impact) {
            session.impact = message;
            session.stage = 'solucao';
            const futureQuestions = [
              `${session.firstName}, se isso continuar mais algumas semanas ou meses... como imagina que vai estar sua vida?`,
              `O que mais te preocupa nisso tudo hoje, ${session.firstName}?`,
              `Tem algo que voc√™ sente que est√° deixando de viver por causa disso?`
            ];
            reply = getRandomResponse(futureQuestions);
          }
        } else {
          const implicationQuestions = [
            `E se eu te perguntasse: isso j√° est√° afetando seu dia a dia? Sua alimenta√ß√£o, sono, ou sua tranquilidade em geral?`,
            `Voc√™ sente que isso tem afetado sua rotina, ${session.firstName}?`,
            `J√° parou pra pensar no quanto isso te desgasta emocionalmente? üòû`
          ];
          reply = getRandomResponse(implicationQuestions);
        }
        break;

      case 'solucao':
        // üü° SOLU√á√ÉO - Fazendo visualizar a melhora
        if (intent === 'desejo_melhora' || intent === 'positiva') {
          session.desiredOutcome = message;
          session.stage = 'fechamento';
          const visualizationResponses = [
            `${session.firstName}, imagina s√≥ se isso j√° estivesse resolvido... o que voc√™ faria diferente no seu dia? üåû`,
            `E se voc√™ come√ßasse a melhorar em algumas semanas... qual seria a primeira coisa que voc√™ iria comemorar? ‚ú®`,
            `Como seria sua vida se esse problema n√£o existisse mais, ${session.firstName}? ‚ú®`
          ];
          reply = getRandomResponse(visualizationResponses);
        } else {
          const solutionQuestions = [
            `${session.firstName}, imagina s√≥ se isso j√° estivesse resolvido... o que voc√™ faria diferente no seu dia? üåû`,
            `E se voc√™ tivesse um plano claro pra resolver isso, montado por algu√©m que realmente te escuta... o quanto isso te traria mais paz?`,
            `Como seria sua vida se esse problema n√£o existisse mais? ‚ú®`
          ];
          reply = getRandomResponse(solutionQuestions);
        }
        break;

      case 'fechamento':
        // üü£ FECHAMENTO - Conduzindo com autoridade e prova social
        if (intent === 'agendar' || intent === 'positiva' || intent === 'horarios') {
          const agendamentoResponses = [
            `Entendi, ${session.firstName}. E olha, o Dr. Quelson tem atendido muitas pessoas com esse mesmo tipo de sintoma. O que elas mais dizem quando saem da consulta √© que, pela primeira vez, sentiram que algu√©m realmente parou pra escutar, investigar a fundo e explicar com clareza o que est√° acontecendo ‚Äî sem pressa, sem superficialidade.

Te falo isso porque tem muito paciente que j√° passou por 2, 3 m√©dicos do plano, tomou v√°rios rem√©dios, mas o problema sempre volta‚Ä¶ e quando chegam aqui, descobrem que estavam tratando o efeito, n√£o a causa.

A consulta √© R$ 400,00 e dura 60 minutos. O Dr. Quelson atende de segunda a sexta, das 8h √†s 18h, e s√°bados pela manh√£. 

Voc√™ gostaria de agendar ainda essa semana para j√° come√ßar esse processo? üìÖ`,

            `${session.firstName}, que bom que voc√™ est√° buscando ajuda agora ‚Äî porque quanto mais cedo voc√™ entende o que est√° acontecendo, mais f√°cil √© tratar de forma certa.

O Dr. Quelson √© especialista em gastroenterologia, e ele costuma ser o primeiro m√©dico que muitos pacientes procuram justamente por isso: ele escuta com calma, investiga a fundo e j√° come√ßa com um plano claro, sem perder tempo com tentativa e erro.

A consulta √© R$ 400,00, 60 minutos onde ele realmente te escuta. Quem passa com ele geralmente diz que sai mais tranquilo por entender de verdade o que est√° acontecendo.

Posso ver aqui o melhor hor√°rio para voc√™... Pode ser essa semana ainda? üìÖ`
          ];
          reply = getRandomResponse(agendamentoResponses);
        } else if (intent === 'valores') {
          reply = `${session.firstName}, a consulta √© R$ 400,00, e olha... vale cada centavo. √â uma consulta de 60 minutos onde o Dr. Quelson realmente te escuta e investiga a fundo. Muitos pacientes j√° me disseram: "Se soubesse que era assim, teria vindo muito antes".

O que o Dr. faz √© ir direto na raiz do problema e montar um plano espec√≠fico pro seu caso. Isso acaba evitando meses de sofrimento e tentativas que s√≥ adiam a solu√ß√£o.

Posso ver aqui o melhor hor√°rio para voc√™... Pode ser essa semana ainda ou prefere aguardar mais uns dias? üìÖ`;
        } else {
          reply = `√â t√£o bom quando conseguimos voltar √† rotina com tranquilidade, n√© ${session.firstName}? O Dr. Quelson √© especialista exatamente nisso que voc√™ est√° passando. Que tal agendarmos uma conversa com ele? üòä`;
        }
        break;

      default:
        // Respostas para situa√ß√µes especiais
        if (intent === 'convenio') {
          reply = `${session.firstName}, aqui √© particular, mas posso te dizer uma coisa? Muita gente que vem aqui j√° passou por v√°rios m√©dicos do conv√™nio... e depois fala que valeu cada centavo investir numa consulta onde realmente se sentiram ouvidas. Quer que eu te conte como funciona? üòä`;
        } else if (intent === 'urgencia') {
          reply = `${session.firstName}, entendo sua urg√™ncia! Para eu conseguir te ajudar da melhor forma, pode me contar rapidinho o que est√° acontecendo? üôè`;
        } else {
          reply = `${session.firstName}, estou aqui para te ajudar da melhor forma. Pode me contar o que voc√™ precisa? üí¨`;
        }
    }

    // Adiciona resposta ao hist√≥rico antes de retornar
    session.conversationHistory.push(`Bot: ${reply}`);
    return reply;

  } catch (error) {
    console.error('üö® Erro cr√≠tico na gera√ß√£o de resposta:', error);
    
    // Fallback de emerg√™ncia
    const safeName = session.firstName || 'amigo(a)';
    return `Desculpe, ${safeName}, estou com dificuldades t√©cnicas moment√¢neas. Por favor, ligue para (11) 99999-9999 para agendamento direto. Obrigada pela compreens√£o! üòä`;
  }
}

// ---- VALIDA√á√ÉO DE PAYLOAD ---------------------------------------------------
function validateWebhookPayload(body) {
  if (!body || typeof body !== 'object') {
    throw new Error('Payload inv√°lido: body n√£o √© objeto');
  }
  
  if (!body.entry || !Array.isArray(body.entry)) {
    throw new Error('Payload inv√°lido: entry n√£o √© array');
  }
  
  return true;
}

// ---- ENVIO DE MENSAGEM BLINDADO - CORRIGIDO ---------------------------------
async function sendMessage(to, message, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await fetch(`https://graph.facebook.com/v19.0/${process.env.WHATSAPP_PHONE_ID}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.WHATSAPP_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messaging_product: 'whatsapp',
          to: to,
          text: { body: message },
        }),
      });

      if (response.ok) {
        return true;
      } else {
        const errorData = await response.text();
        console.error(`‚ùå Tentativa ${attempt}/${retries} falhou:`, errorData);
        
        // Se √© erro de token, n√£o tenta novamente
        if (errorData.includes('OAuthException') || errorData.includes('access token')) {
          console.error('üö® ERRO DE TOKEN - N√£o retentando');
          throw new Error(`Token inv√°lido: ${errorData}`);
        }
        
        if (attempt === retries) {
          throw new Error(`Falha ap√≥s ${retries} tentativas: ${errorData}`);
        }
        
        // Wait before retry (exponential backoff)
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));
      }
    } catch (error) {
      console.error(`‚ùå Erro na tentativa ${attempt}/${retries}:`, error.message);
      
      if (attempt === retries) {
        throw error;
      }
      
      // Wait before retry
      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));
    }
  }
  
  return false; // CORRE√á√ÉO: Retorna false se todas as tentativas falharem
}

// ---- LOGGING CR√çTICO --------------------------------------------------------
function logCriticalError(error, context) {
  const errorLog = {
    timestamp: new Date().toISOString(),
    error: error.message,
    stack: error.stack,
    context,
    severity: 'CRITICAL',
    dailyTokens: dailyTokenCount,
    dailyRequests: dailyRequestCount,
    activeSessions: sessions.size
  };
  
  console.error('üö® ERRO CR√çTICO:', JSON.stringify(errorLog, null, 2));
  
  // Em produ√ß√£o: enviar para sistema de monitoramento
  // sendToSlack(errorLog) ou sendToEmail(errorLog)
}

// ---- WEBHOOK BLINDADO CONTRA TODOS OS ERROS ---------------------------------
app.post('/webhook', async (req, res) => {
  const startTime = Date.now();
  let from = 'unknown';
  
  try {
    // 1. VALIDA√á√ÉO DE PAYLOAD
    validateWebhookPayload(req.body);
    
    console.log('üì® Webhook recebido:', JSON.stringify(req.body, null, 2));
    
    const entry = req.body.entry?.[0];
    const changes = entry?.changes?.[0];
    const messageData = changes?.value?.messages?.[0];

    // 2. FILTROS DE MENSAGEM
    if (!messageData) {
      console.log('‚ÑπÔ∏è Webhook sem mensagem, ignorando');
      return res.sendStatus(200);
    }

    // Extrai dados b√°sicos
    from = messageData.from;
    const messageType = messageData.type;
    
    // 3. RATE LIMITING POR USU√ÅRIO
    if (isRateLimited(from)) {
      console.log(`‚ö†Ô∏è Rate limit atingido para ${from}`);
      await sendMessage(from, 'Por favor, aguarde um momento antes de enviar outra mensagem. Obrigada! üòä');
      return res.status(429).send('Rate limited');
    }

    // 4. CONTROLE DE TIPOS DE M√çDIA
    if (messageType !== 'text') {
      console.log(`üìé M√≠dia recebida (${messageType}) de ${from}`);
      const session = getSession(from);
      const mediaResponse = `${session.firstName || 'Ol√°'}, recebi sua ${messageType === 'audio' ? 'mensagem de √°udio' : 'm√≠dia'}! 
      
Por favor, pode escrever em texto? Assim consigo te atender melhor! üòä

Para emerg√™ncias, ligue:
üöë SAMU: 192
üìû Consult√≥rio: (11) 99999-9999`;
      
      await sendMessage(from, mediaResponse);
      return res.sendStatus(200);
    }

    const text = messageData.text?.body;
    
    if (!text || text.trim().length === 0) {
      console.log('‚ÑπÔ∏è Mensagem de texto vazia, ignorando');
      return res.sendStatus(200);
    }

    console.log(`[${new Date().toLocaleTimeString()}] üìû ${from}: ${text}`);

    // 5. CONTROLE DE SESS√ÉO
    const session = getSession(from);
    session.requestCount = (session.requestCount || 0) + 1;

    // Previne spam de um usu√°rio
    if (session.requestCount > 100) {
      console.log(`üö´ Usu√°rio ${from} excedeu limite de mensagens`);
      await sendMessage(from, 'Por hoje j√° conversamos bastante! Para continuar, ligue para (11) 99999-9999. Obrigada! üòä');
      return res.sendStatus(200);
    }

    // 6. DETEC√á√ÉO DE EMERG√äNCIA (prioridade m√°xima)
    if (isEmergency(text) && !emergencyPhones.has(from)) {
      console.log(`üö® EMERG√äNCIA detectada de ${from}: ${text}`);
      const emergencyReply = getEmergencyResponse(session.firstName);
      await sendMessage(from, emergencyReply);
      emergencyPhones.add(from);
      
      // Log especial para emerg√™ncias
      const emergencyLog = {
        timestamp: new Date().toISOString(),
        phone: from,
        message: text,
        type: 'EMERGENCY',
        firstName: session.firstName
      };
      console.error('üö® EMERG√äNCIA M√âDICA:', JSON.stringify(emergencyLog));
      
      return res.sendStatus(200);
    }

    // 7. GERA√á√ÉO DE RESPOSTA PRINCIPAL
    const reply = await generateReply(session, from, text);
    
    console.log(`[${new Date().toLocaleTimeString()}] ü§ñ ‚Üí ${session.firstName || from}: ${reply.substring(0, 100)}${reply.length > 100 ? '...' : ''}`);

    // 8. ENVIO COM RETRY
    await sendMessage(from, reply);

    // 9. M√âTRICAS DE PERFORMANCE
    const processingTime = Date.now() - startTime;
    if (processingTime > 5000) {
      console.warn(`‚ö†Ô∏è Processamento lento: ${processingTime}ms para ${from}`);
    }

    res.sendStatus(200);

  } catch (error) {
    // 10. TRATAMENTO DE ERRO CR√çTICO
    logCriticalError(error, {
      body: req.body,
      from,
      dailyTokens: dailyTokenCount,
      dailyRequests: dailyRequestCount,
      processingTime: Date.now() - startTime
    });

    // Fallback graceful
    try {
      const session = getSession(from);
      const fallbackMessage = `Desculpe, ${session.firstName || 'amigo(a)'}, estou com dificuldades t√©cnicas. 

Para agendamento imediato:
üìû Ligue: (11) 99999-9999
‚è∞ Seg-Sex: 8h √†s 18h
‚è∞ S√°b: 8h √†s 12h

Obrigada pela compreens√£o! üòä`;
      
      await sendMessage(from, fallbackMessage);
    } catch (fallbackError) {
      console.error('üíÄ Falha total no fallback:', fallbackError);
    }

    res.status(500).json({
      error: 'Internal server error',
      timestamp: new Date().toISOString(),
      reference: `ERR-${Date.now()}`
    });
  }
});

// ---- VALIDA√á√ÉO DO WEBHOOK (GET) ---------------------------------------------
app.get('/webhook', (req, res) => {
  const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  console.log(`üîê Verifica√ß√£o webhook: mode=${mode}, token=${token ? 'PROVIDED' : 'MISSING'}`);

  if (mode === 'subscribe' && token === VERIFY_TOKEN) {
    console.log('‚úÖ Webhook verificado com sucesso!');
    return res.status(200).send(challenge);
  } else {
    console.log('‚ùå Falha na verifica√ß√£o do webhook');
    return res.sendStatus(403);
  }
});

// ---- ROTA DE STATUS E MONITORAMENTO -----------------------------------------
app.get('/', (req, res) => {
  const uptime = process.uptime();
  const memoryUsage = process.memoryUsage();
  
  res.json({
    status: 'üíº Secret√°ria NEPQ Blindada Online',
    version: '2.0.1-corrected',
    uptime: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m`,
    memory: {
      used: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
      total: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`
    },
    metrics: {
      activeSessions: sessions.size,
      dailyTokens: dailyTokenCount,
      dailyRequests: dailyRequestCount,
      hourlyTokens: hourlyTokenCount,
      hourlyRequests: hourlyRequestCount,
      maxDailyTokens: MAX_DAILY_TOKENS,
      maxDailyRequests: MAX_DAILY_REQUESTS,
      maxHourlyTokens: MAX_HOURLY_TOKENS,
      maxHourlyRequests: MAX_HOURLY_REQUESTS,
      rateLimiterSize: rateLimiter.size,
      emergencyPhonesSize: emergencyPhones.size
    },
    features: [
      'üö® Detec√ß√£o de emerg√™ncia melhorada',
      '‚ö° Rate limiting inteligente',
      'üß† Context compression',
      'üí∞ Cost monitoring rigoroso',
      'üîÑ Auto-retry com backoff',
      'üõ°Ô∏è Error recovery robusto',
      'üßπ Memory cleanup autom√°tico',
      'üìä Real-time metrics',
      'üïê Timezone Brasil correto'
    ],
    timestamp: new Date().toISOString()
  });
});

// ---- ROTA DE M√âTRICAS PARA MONITORAMENTO ------------------------------------
app.get('/metrics', (req, res) => {
  res.json({
    sessions: {
      active: sessions.size,
      list: Array.from(sessions.keys()).map(phone => ({
        phone: phone.substring(0, 5) + '***',
        stage: sessions.get(phone)?.stage,
        messageCount: sessions.get(phone)?.conversationHistory?.length || 0,
        lastActivity: sessions.get(phone)?.lastActivity
      }))
    },
    usage: {
      dailyTokens: dailyTokenCount,
      dailyRequests: dailyRequestCount,
      hourlyTokens: hourlyTokenCount,
      hourlyRequests: hourlyRequestCount,
      tokenLimit: MAX_DAILY_TOKENS,
      requestLimit: MAX_DAILY_REQUESTS,
      tokenPercentage: ((dailyTokenCount / MAX_DAILY_TOKENS) * 100).toFixed(1),
      requestPercentage: ((dailyRequestCount / MAX_DAILY_REQUESTS) * 100).toFixed(1)
    },
    rateLimiting: {
      activeUsers: rateLimiter.size,
      emergencyPhones: emergencyPhones.size
    },
    system: {
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
      nodeVersion: process.version
    }
  });
});

// ---- ROTA DE RESET (PARA EMERG√äNCIAS) ---------------------------------------
app.post('/reset', (req, res) => {
  const { password } = req.body;
  
  if (password !== process.env.RESET_PASSWORD) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  // Reset completo do sistema
  sessions.clear();
  rateLimiter.clear();
  emergencyPhones.clear();
  dailyTokenCount = 0;
  dailyRequestCount = 0;
  hourlyTokenCount = 0;
  hourlyRequestCount = 0;
  
  console.log('üîÑ Sistema resetado manualmente');
  
  res.json({
    message: 'Sistema resetado com sucesso',
    timestamp: new Date().toISOString()
  });
});

// ---- HEALTH CHECK -----------------------------------------------------------
app.get('/health', (req, res) => {
  const health = {
    status: 'healthy',
    timestamp: new Date().toISOString(),
    checks: {
      openai: process.env.OPENAI_API_KEY ? 'configured' : 'missing',
      whatsapp: process.env.WHATSAPP_TOKEN ? 'configured' : 'missing',
      memory: process.memoryUsage().heapUsed < 500 * 1024 * 1024 ? 'ok' : 'high',
      sessions: sessions.size < 1000 ? 'ok' : 'high'
    }
  };
  
  const allHealthy = Object.values(health.checks).every(check => 
    check === 'configured' || check === 'ok'
  );
  
  res.status(allHealthy ? 200 : 503).json(health);
});

// ---- CLEANUP JOBS MELHORADOS ------------------------------------------------
// Limpeza de sess√µes antigas a cada 30 minutos
setInterval(cleanupOldSessions, 30 * 60 * 1000);

// Limpeza de rate limiter a cada 5 minutos (mais agressiva)
setInterval(() => {
  const now = Date.now();
  let cleaned = 0;
  
  for (const [phone, requests] of rateLimiter.entries()) {
    const recentRequests = requests.filter(time => now - time < 60000);
    if (recentRequests.length === 0) {
      rateLimiter.delete(phone);
      cleaned++;
    } else {
      rateLimiter.set(phone, recentRequests);
    }
  }
  
  if (cleaned > 0) {
    console.log(`üßπ Rate limiter: ${cleaned} usu√°rios inativos removidos`);
  }
}, 5 * 60 * 1000);

// Limpeza de emergencyPhones a cada 1 hora
setInterval(() => {
  const size = emergencyPhones.size;
  emergencyPhones.clear();
  if (size > 0) {
    console.log(`üßπ Emergency phones: ${size} registros limpos`);
  }
}, 60 * 60 * 1000);

// NOVO: Limpeza de mem√≥ria for√ßada a cada 6 horas
setInterval(() => {
  if (global.gc) {
    global.gc();
    console.log('üßπ Garbage collection manual executada');
  }
}, 6 * 60 * 60 * 1000);

// ---- GRACEFUL SHUTDOWN ------------------------------------------------------
process.on('SIGTERM', () => {
  console.log('üì¥ Recebido SIGTERM, fazendo shutdown graceful...');
  
  // Log final
  console.log(`üìä Stats finais: ${sessions.size} sess√µes, ${dailyTokenCount} tokens, ${dailyRequestCount} requests`);
  
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üì¥ Recebido SIGINT, fazendo shutdown graceful...');
  process.exit(0);
});

// ---- INICIALIZA√á√ÉO -----------------------------------------------------------
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log('üöÄüõ°Ô∏è === SECRET√ÅRIA NEPQ BLINDADA CORRIGIDA === üõ°Ô∏èüöÄ');
  console.log(`üìç Porta: ${PORT}`);
  console.log(`üß† M√©todo: Neuro Emotional Persuasion Questions`);
  console.log(`‚öïÔ∏è Especialidade: Dr. Quelson - Gastroenterologia`);
  console.log(`üîó Webhook: https://meu-bot-jhcl.onrender.com/webhook`);
  console.log('');
  console.log('üõ°Ô∏è PROTE√á√ïES ATIVAS:');
  console.log('  ‚úÖ Detec√ß√£o de emerg√™ncia m√©dica melhorada');
  console.log('  ‚úÖ Rate limiting por usu√°rio inteligente');
  console.log('  ‚úÖ Controle de custos OpenAI rigoroso');
  console.log('  ‚úÖ Cleanup autom√°tico de mem√≥ria');
  console.log('  ‚úÖ Fallback sem IA robusto');
  console.log('  ‚úÖ Retry autom√°tico com exponential backoff');
  console.log('  ‚úÖ Context compression inteligente');
  console.log('  ‚úÖ Timezone Brasil correto');
  console.log('  ‚úÖ Valida√ß√£o de payload completa');
  console.log('  ‚úÖ Graceful error handling');
  console.log('');
  console.log(`üí∞ Limites: ${MAX_DAILY_TOKENS} tokens/dia, ${MAX_DAILY_REQUESTS} requests/dia`);
  console.log(`‚è∞ Limites hor√°rios: ${MAX_HOURLY_TOKENS} tokens/hora, ${MAX_HOURLY_REQUESTS} requests/hora`);
  console.log('üìä Monitoramento: /metrics');
  console.log('üè• Health check: /health');
  console.log('');
  console.log('üíº Pronta para atender pacientes com seguran√ßa m√°xima!');
});
