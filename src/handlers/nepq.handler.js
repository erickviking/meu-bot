// src/handlers/nepq.handler.js
const config = require('../config');
const { OpenAI } = require('openai');
// A fun√ß√£o 'formatAsName' n√£o √© mais necess√°ria para extrair o nome.
// const { formatAsName } = require('../utils/helpers'); 
const { buildPromptForClinic } = require('../services/promptBuilder');

// Inicializa o cliente da OpenAI com a chave de API.
const openai = new OpenAI({ apiKey: config.openai.apiKey });

/**
 * Fun√ß√£o principal que se comunica com a LLM.
 * AGORA ELA PASSA A SESS√ÉO COMPLETA PARA O PROMPT BUILDER.
 * @param {object} session - O objeto de sess√£o completo do usu√°rio.
 * @param {string} latestMessage - A √∫ltima mensagem enviada pelo usu√°rio.
 * @returns {Promise<object>} Um objeto contendo a resposta da IA e o novo estado da conversa.
 */
async function getLlmReply(session, latestMessage) {
    try {
        // --- IN√çCIO DA CORRE√á√ÉO ---
        // Agora passamos a sess√£o inteira para que o prompt seja sens√≠vel ao estado.
        const systemPrompt = buildPromptForClinic(session.clinicConfig, session);
        // --- FIM DA CORRE√á√ÉO ---

        const messages = [
            { role: 'system', content: systemPrompt },
            ...session.conversationHistory,
            { role: 'user', content: latestMessage }
        ];

        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages,
            temperature: 0.7,
            max_tokens: 600,
        });

        const botReply = response.choices[0].message.content;

        session.conversationHistory.push({ role: 'user', content: latestMessage });
        session.conversationHistory.push({ role: 'assistant', content: botReply });
        
        if (session.conversationHistory.length > 12) {
            session.conversationHistory = session.conversationHistory.slice(-12);
        }

        const isClosingStatement = 
            botReply.includes("Por isso o atendimento √© particular.") ||
            botReply.includes("O valor da consulta √©");

        if (isClosingStatement && session.state === 'nepq_discovery') {
            console.log(`[FSM] Fechamento detectado. Mudando estado para 'closing_delivered'.`);
            return { reply: botReply, newState: 'closing_delivered' };
        }

        return { reply: botReply, newState: session.state };

    } catch (error) {
        console.error('üö® Erro na chamada da API da OpenAI:', error);
        return { 
            reply: `Desculpe, ${session.firstName || 'amigo(a)'}, estou com uma dificuldade t√©cnica.`,
            newState: session.state 
        };
    }
}

/**
 * REESCRITA: Gerencia a fase de onboarding usando IA para extrair o nome.
 * @returns {Promise<string | null>} A resposta do bot ou null se o onboarding estiver completo.
 */
async function handleInitialMessage(session, message, clinicConfig) {
    const currentState = session.onboardingState;
    const doctorName = clinicConfig.doctorName || 'nosso especialista';
    const secretaryName = clinicConfig.secretaryName || 'a secret√°ria virtual';

    if (currentState === 'start') {
        session.onboardingState = 'awaiting_name';
        return `Ol√°! Bem-vindo ao consult√≥rio do ${doctorName}. Sou a secret√°ria, ${secretaryName}. Com quem eu tenho o prazer de falar?`;
    }

    if (currentState === 'awaiting_name') {
        console.log(`[IA Onboarding] Tentando extrair nome da frase: "${message}"`);
        
        const nameExtractionResponse = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { 
                    role: 'system', 
                    content: "Voc√™ √© um especialista em extrair nomes de pessoas de frases em portugu√™s. A frase a seguir √© de um usu√°rio se apresentando. Sua tarefa √© extrair o nome DO USU√ÅRIO que est√° falando. O usu√°rio pode dizer 'meu nome √©...', 'eu sou o...', 'aqui √© o...'. Ignore outros nomes que possam aparecer (como o nome do atendente). Responda APENAS com o primeiro nome do usu√°rio. Se nenhum nome de usu√°rio for encontrado, responda com a palavra 'NULL'."
                },
                { role: 'user', content: message }
            ],
            temperature: 0,
            max_tokens: 10,
        });

        const potentialName = nameExtractionResponse.choices[0].message.content.trim();

        if (!potentialName || potentialName.toUpperCase() === 'NULL' || potentialName.length < 2) {
            return `Desculpe, n√£o consegui identificar seu nome. Por favor, poderia me dizer apenas como devo te chamar?`;
        }
        
        const formattedName = potentialName.charAt(0).toUpperCase() + potentialName.slice(1).toLowerCase();
        session.firstName = formattedName;
        session.onboardingState = 'complete';
        session.state = 'nepq_discovery';

        const welcomeMessage = `Perfeito, ${formattedName}! √â um prazer falar com voc√™. üòä Para eu te ajudar da melhor forma, pode me contar o que te motivou a procurar o ${doctorName} hoje?`;

        session.conversationHistory = [];
        session.conversationHistory.push({ role: 'user', content: `O paciente disse que seu nome √© ${formattedName}.` });
        session.conversationHistory.push({ role: 'assistant', content: welcomeMessage });
        
        return welcomeMessage;
    }

    return null;
}

module.exports = { getLlmReply, handleInitialMessage };
